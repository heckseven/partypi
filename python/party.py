import unicornhat as uh
import time
import colorsys
import math
from random import randint
import numpy

uh.set_layout(uh.PHAT)
uh.rotation(90)
uh.brightness(0.4)
width,height=uh.get_shape()

### Many of these were created by pimoroni and can be found here: https://github.com/pimoroni/unicorn-hat/tree/master/examples
### I much appreciate their efforts. This script consolidates some of their animations and loops them

def getThisPartyStarted(speed = 2):
    uh.rotation(0)
    r, g, b = [255, 0, 0]
    t = speed
    for x in range(69):
        uh.set_pixel( 2, 2, r, g, b )
        uh.set_pixel( 2, 1, r, g, b )
        uh.set_pixel( 3, 2, r, g, b )
        uh.set_pixel( 3, 1, r, g, b )
        uh.show()
        time.sleep( t )
        uh.set_pixel( 2, 2, 0, 0, 0 )
        uh.set_pixel( 2, 1, 0, 0, 0 )
        uh.set_pixel( 3, 2, 0, 0, 0 )
        uh.set_pixel( 3, 1, 0, 0, 0 )
        uh.show()
        time.sleep( t )
        if t > .02:
            t *= .5

def pause(seconds = 1):
    uh.clear()
    uh.show()
    time.sleep(seconds)

# This is my first ever script involving blinken lights
# I refactored it a bit from the original mess I wrote
def scanner(scans = 1, speed = 1):
    uh.rotation(270)
    r, g, b = [255, 0, 0]

    for s in range(scans):
        # speed = 1.0 / bpm * 60
        time.sleep( 0.22 * speed )
        for h in range(height + 1):
            for w in range(width):
                uh.set_pixel( w, h, r, g, b )
            uh.show()
            time.sleep( 0.024 * speed )
            uh.clear()

# Yep. I wrote this too. THIN P A C M A N
def pacman(chomps, speed = 1):
    uh.rotation(0)
    r, g, b = [232, 239, 35]
    t = speed * .125
    pacman = [
    [
    [0,0],
    [0,1],
    [0,2],
    [1,1],
    [1,2],
    [1,3],
    [2,2],
    [2,3],
    [3,3],
    [4,2],
    [4,3],
    [5,1],
    [5,2],
    [5,3],
    [6,0],
    [6,1],
    [6,2],
    ],
    [
    [0,1],
    [0,2],
    [1,0],
    [1,1],
    [1,2],
    [1,3],
    [2,1],
    [2,2],
    [2,3],
    [3,3],
    [4,1],
    [4,2],
    [4,3],
    [5,0],
    [5,1],
    [5,2],
    [5,3],
    [6,1],
    [6,2],
    ],
    [
    [0,1],
    [0,2],
    [1,0],
    [1,1],
    [1,2],
    [1,3],
    [2,0],
    [2,1],
    [2,2],
    [2,3],
    [3,0],
    [3,1],
    [3,2],
    [3,3],
    [4,0],
    [4,1],
    [4,2],
    [4,3],
    [5,0],
    [5,1],
    [5,2],
    [5,3],
    [6,1],
    [6,2],
    ]
    ]

    for c in range(chomps):
        for p in range(4):
            m = p
            if m > 2:
                m = 1
            for i in range(len(pacman[m])):
                uh.set_pixel(pacman[m][i][0], pacman[m][i][1], r, g, b)
            uh.show()
            time.sleep( t )
            uh.clear()

def blinker(blinks, color = [255, 0, 0], speed = 0.02):
    uh.rotation(270)

    for b in range(blinks):
        r, g, b = color
        uh.set_all(r, g, b)
        uh.show()
        time.sleep( speed )

        uh.clear()
        uh.show()
        time.sleep( speed )

def spinners(spins, speed = 0.2):
    uh.rotation(270)
    r, g, b = [255, 255, 255]

    uh.set_pixel( 1, 1, r, g, b )
    uh.set_pixel( 1, 5, r, g, b )

    uh.set_pixel( 1, 0, r, g, b )
    uh.set_pixel( 0, 1, r, g, b )
    uh.set_pixel( 2, 1, r, g, b )
    uh.set_pixel( 1, 2, r, g, b )
    uh.set_pixel( 1, 4, r, g, b )
    uh.set_pixel( 0, 5, r, g, b )
    uh.set_pixel( 2, 5, r, g, b )
    uh.set_pixel( 1, 6, r, g, b )

    for s in range(spins):
        uh.set_pixel( 1, 1, r, g, b )
        uh.set_pixel( 1, 5, r, g, b )
        uh.set_pixel( 1, 0, r, g, b )
        uh.set_pixel( 0, 1, r, g, b )
        uh.set_pixel( 2, 1, r, g, b )
        uh.set_pixel( 1, 2, r, g, b )
        uh.set_pixel( 1, 4, r, g, b )
        uh.set_pixel( 0, 5, r, g, b )
        uh.set_pixel( 2, 5, r, g, b )
        uh.set_pixel( 1, 6, r, g, b )
        uh.show()
        time.sleep( speed )
        uh.clear()
        uh.set_pixel( 1, 1, r, g, b )
        uh.set_pixel( 1, 5, r, g, b )
        uh.set_pixel( 0, 0, r, g, b )
        uh.set_pixel( 2, 0, r, g, b )
        uh.set_pixel( 0, 2, r, g, b )
        uh.set_pixel( 2, 2, r, g, b )
        uh.set_pixel( 0, 4, r, g, b )
        uh.set_pixel( 2, 4, r, g, b )
        uh.set_pixel( 0, 6, r, g, b )
        uh.set_pixel( 2, 6, r, g, b )
        uh.show()
        time.sleep( speed )
        uh.clear()
    # for s in range(spins):

    uh.show()
    time.sleep( 4 )

    uh.clear()

# spinners(40)

def chase(laps, speed = 0.04):
    for lap in range(laps):
        uh.rotation(0)
        r, g, b = [0, 0, 255]
        t = speed
        for x in range(8):
            uh.set_pixel( x, 2, r, g, b )
            uh.set_pixel( x, 1, r, g, b )
            uh.show()
            time.sleep( t )
            uh.clear()
        for x in range(6,0,-1):
            uh.set_pixel( x, 3, r, g, b )
            uh.set_pixel( x, 4, r, g, b )
            uh.show()
            time.sleep( t )
            uh.clear()

def larson(looks, speed = 0.12):
    for l in range(looks):
        uh.rotation(0)
        r, g, b = [255, 0, 0]
        t = speed
        ease = speed * .125
        for x in range(8):
            uh.set_pixel( x, 2, r, g, b )
            uh.set_pixel( x, 1, r, g, b )
            uh.show()
            time.sleep( t )
            uh.clear()
            if x < 4:
                t -= ease
            else:
                t += ease
        for x in range(6,0,-1):
            uh.set_pixel( x, 1, r, g, b )
            uh.set_pixel( x, 2, r, g, b )
            uh.show()
            time.sleep( t )
            uh.clear()
            if x < 4:
    			t += ease
            else:
                t -= ease

# This isn't used here, but can be used to display ASCII art
# You can see it in use in radtag.py
def billboard(text, color = [255, 0, 0], bgcolor = [0, 0, 0]):
    uh.rotation(90)
    i = -1
    for k in range(len(text)):
        r, g, b = color
        rb, gb, bb = bgcolor
        i = 0 if i>=100*len(text) else i+1 # avoid overflow
        for h in range(height):
            for w in range(width):
                hPos = (i+h) % len(text)
                chr = text[hPos][w]
                if chr == ' ':
                    uh.set_pixel(w, h, rb, gb, bb)
                else:
                    uh.set_pixel(w, h, r, g, b)
        uh.show()
        time.sleep(0.15)
        # time.sleep(0.05)

# HACK THE PLANET
manifestotxt = ["01010100", "01101000", "01101001", "01110011", "00100000", "01101001", "01110011", "00100000", "01101111", "01110101", "01110010", "00100000", "01110111", "01101111", "01110010", "01101100", "01100100", "00100000", "01101110", "01101111", "01110111", "00101110", "00101110", "00101110", "00100000", "01110100", "01101000", "01100101", "00100000", "01110111", "01101111", "01110010", "01101100", "01100100", "00100000", "01101111", "01100110", "00100000", "01110100", "01101000", "01100101", "00100000", "01100101", "01101100", "01100101", "01100011", "01110100", "01110010", "01101111", "01101110", "00100000", "01100001", "01101110", "01100100", "00100000", "01110100", "01101000", "01100101", "00100000", "01110011", "01110111", "01101001", "01110100", "01100011", "01101000", "00101100", "00100000", "01110100", "01101000", "01100101", "00100000", "01100010", "01100101", "01100001", "01110101", "01110100", "01111001", "00100000", "01101111", "01100110", "00100000", "01110100", "01101000", "01100101", "00100000", "01100010", "01100001", "01110101", "01100100", "00101110", "00100000", "01010111", "01100101", "00100000", "01101101", "01100001", "01101011", "01100101", "00100000", "01110101", "01110011", "01100101", "00100000", "01101111", "01100110", "00100000", "01100001", "00100000", "01110011", "01100101", "01110010", "01110110", "01101001", "01100011", "01100101", "00100000", "01100001", "01101100", "01110010", "01100101", "01100001", "01100100", "01111001", "00100000", "01100101", "01111000", "01101001", "01110011", "01110100", "01101001", "01101110", "01100111", "00100000", "01110111", "01101001", "01110100", "01101000", "01101111", "01110101", "01110100", "00100000", "01110000", "01100001", "01111001", "01101001", "01101110", "01100111", "00100000", "01100110", "01101111", "01110010", "00100000", "01110111", "01101000", "01100001", "01110100", "00100000", "01100011", "01101111", "01110101", "01101100", "01100100", "00100000", "01100010", "01100101", "00100000", "01100100", "01101001", "01110010", "01110100", "00101101", "01100011", "01101000", "01100101", "01100001", "01110000", "00100000", "01101001", "01100110", "00100000", "01101001", "01110100", "00100000", "01110111", "01100001", "01110011", "01101110", "00100111", "01110100", "00100000", "01110010", "01110101", "01101110", "00100000", "01100010", "01111001", "00100000", "01110000", "01110010", "01101111", "01100110", "01101001", "01110100", "01100101", "01100101", "01110010", "01101001", "01101110", "01100111", "00100000", "01100111", "01101100", "01110101", "01110100", "01110100", "01101111", "01101110", "01110011", "00101100", "00100000", "01100001", "01101110", "01100100", "00100000", "01111001", "01101111", "01110101", "00100000", "01100011", "01100001", "01101100", "01101100", "00100000", "01110101", "01110011", "00100000", "01100011", "01110010", "01101001", "01101101", "01101001", "01101110", "01100001", "01101100", "01110011", "00101110", "00100000", "01010111", "01100101", "00100000", "01100101", "01111000", "01110000", "01101100", "01101111", "01110010", "01100101", "00101110", "00101110", "00101110", "00100000", "01100001", "01101110", "01100100", "00100000", "01111001", "01101111", "01110101", "00100000", "01100011", "01100001", "01101100", "01101100", "00100000", "01110101", "01110011", "00100000", "01100011", "01110010", "01101001", "01101101", "01101001", "01101110", "01100001", "01101100", "01110011", "00101110", "00100000", "01010111", "01100101", "00100000", "01110011", "01100101", "01100101", "01101011", "00100000", "01100001", "01100110", "01110100", "01100101", "01110010", "00100000", "01101011", "01101110", "01101111", "01110111", "01101100", "01100101", "01100100", "01100111", "01100101", "00101110", "00101110", "00101110", "00100000", "01100001", "01101110", "01100100", "00100000", "01111001", "01101111", "01110101", "00100000", "01100011", "01100001", "01101100", "01101100", "00100000", "01110101", "01110011", "00100000", "01100011", "01110010", "01101001", "01101101", "01101001", "01101110", "01100001", "01101100", "01110011", "00101110", "00100000", "01010111", "01100101", "00100000", "01100101", "01111000", "01101001", "01110011", "01110100", "00100000", "01110111", "01101001", "01110100", "01101000", "01101111", "01110101", "01110100", "00100000", "01110011", "01101011", "01101001", "01101110", "00100000", "01100011", "01101111", "01101100", "01101111", "01110010", "00101100", "00100000", "01110111", "01101001", "01110100", "01101000", "01101111", "01110101", "01110100", "00100000", "01101110", "01100001", "01110100", "01101001", "01101111", "01101110", "01100001", "01101100", "01101001", "01110100", "01111001", "00101100", "00100000", "01110111", "01101001", "01110100", "01101000", "01101111", "01110101", "01110100", "00100000", "01110010", "01100101", "01101100", "01101001", "01100111", "01101001", "01101111", "01110101", "01110011", "00100000", "01100010", "01101001", "01100001", "01110011", "00101110", "00101110", "00101110", "00100000", "01100001", "01101110", "01100100", "00100000", "01111001", "01101111", "01110101", "00100000", "01100011", "01100001", "01101100", "01101100", "00100000", "01110101", "01110011", "00100000", "01100011", "01110010", "01101001", "01101101", "01101001", "01101110", "01100001", "01101100", "01110011", "00101110", "00100000", "01011001", "01101111", "01110101", "00100000", "01100010", "01110101", "01101001", "01101100", "01100100", "00100000", "01100001", "01110100", "01101111", "01101101", "01101001", "01100011", "00100000", "01100010", "01101111", "01101101", "01100010", "01110011", "00101100", "00100000", "01111001", "01101111", "01110101", "00100000", "01110111", "01100001", "01100111", "01100101", "00100000", "01110111", "01100001", "01110010", "01110011", "00101100", "00100000", "01111001", "01101111", "01110101", "00100000", "01101101", "01110101", "01110010", "01100100", "01100101", "01110010", "00101100", "00100000", "01100011", "01101000", "01100101", "01100001", "01110100", "00101100", "00100000", "01100001", "01101110", "01100100", "00100000", "01101100", "01101001", "01100101", "00100000", "01110100", "01101111", "00100000", "01110101", "01110011", "00100000", "01100001", "01101110", "01100100", "00100000", "01110100", "01110010", "01111001", "00100000", "01110100", "01101111", "00100000", "01101101", "01100001", "01101011", "01100101", "00100000", "01110101", "01110011", "00100000", "01100010", "01100101", "01101100", "01101001", "01100101", "01110110", "01100101", "00100000", "01101001", "01110100", "00100111", "01110011", "00100000", "01100110", "01101111", "01110010", "00100000", "01101111", "01110101", "01110010", "00100000", "01101111", "01110111", "01101110", "00100000", "01100111", "01101111", "01101111", "01100100", "00101100", "00100000", "01111001", "01100101", "01110100", "00100000", "01110111", "01100101", "00100111", "01110010", "01100101", "00100000", "01110100", "01101000", "01100101", "00100000", "01100011", "01110010", "01101001", "01101101", "01101001", "01101110", "01100001", "01101100", "01110011", "00101110", "00001101", "00001010", "00001101", "00001010", "01011001", "01100101", "01110011", "00101100", "00100000", "01001001", "00100000", "01100001", "01101101", "00100000", "01100001", "00100000", "01100011", "01110010", "01101001", "01101101", "01101001", "01101110", "01100001", "01101100", "00101110", "00100000", "01001101", "01111001", "00100000", "01100011", "01110010", "01101001", "01101101", "01100101", "00100000", "01101001", "01110011", "00100000", "01110100", "01101000", "01100001", "01110100", "00100000", "01101111", "01100110", "00100000", "01100011", "01110101", "01110010", "01101001", "01101111", "01110011", "01101001", "01110100", "01111001", "00101110", "00100000", "01001101", "01111001", "00100000", "01100011", "01110010", "01101001", "01101101", "01100101", "00100000", "01101001", "01110011", "00100000", "01110100", "01101000", "01100001", "01110100", "00100000", "01101111", "01100110", "00100000", "01101010", "01110101", "01100100", "01100111", "01101001", "01101110", "01100111", "00100000", "01110000", "01100101", "01101111", "01110000", "01101100", "01100101", "00100000", "01100010", "01111001", "00100000", "01110111", "01101000", "01100001", "01110100", "00100000", "01110100", "01101000", "01100101", "01111001", "00100000", "01110011", "01100001", "01111001", "00100000", "01100001", "01101110", "01100100", "00100000", "01110100", "01101000", "01101001", "01101110", "01101011", "00101100", "00100000", "01101110", "01101111", "01110100", "00100000", "01110111", "01101000", "01100001", "01110100", "00100000", "01110100", "01101000", "01100101", "01111001", "00100000", "01101100", "01101111", "01101111", "01101011", "00100000", "01101100", "01101001", "01101011", "01100101", "00101110", "00100000", "01001101", "01111001", "00100000", "01100011", "01110010", "01101001", "01101101", "01100101", "00100000", "01101001", "01110011", "00100000", "01110100", "01101000", "01100001", "01110100", "00100000", "01101111", "01100110", "00100000", "01101111", "01110101", "01110100", "01110011", "01101101", "01100001", "01110010", "01110100", "01101001", "01101110", "01100111", "00100000", "01111001", "01101111", "01110101", "00101100", "00100000", "01110011", "01101111", "01101101", "01100101", "01110100", "01101000", "01101001", "01101110", "01100111", "00100000", "01110100", "01101000", "01100001", "01110100", "00100000", "01111001", "01101111", "01110101", "00100000", "01110111", "01101001", "01101100", "01101100", "00100000", "01101110", "01100101", "01110110", "01100101", "01110010", "00100000", "01100110", "01101111", "01110010", "01100111", "01101001", "01110110", "01100101", "00100000", "01101101", "01100101", "00100000", "01100110", "01101111", "01110010", "00101110", "00001101", "00001010", "00001101", "00001010", "01001001", "00100000", "01100001", "01101101", "00100000", "01100001", "00100000", "01101000", "01100001", "01100011", "01101011", "01100101", "01110010", "00101100", "00100000", "01100001", "01101110", "01100100", "00100000", "01110100", "01101000", "01101001", "01110011", "00100000", "01101001", "01110011", "00100000", "01101101", "01111001", "00100000", "01101101", "01100001", "01101110", "01101001", "01100110", "01100101", "01110011", "01110100", "01101111", "00101110", "00100000", "01011001", "01101111", "01110101", "00100000", "01101101", "01100001", "01111001", "00100000", "01110011", "01110100", "01101111", "01110000", "00100000", "01110100", "01101000", "01101001", "01110011", "00100000", "01101001", "01101110", "01100100", "01101001", "01110110", "01101001", "01100100", "01110101", "01100001", "01101100", "00101100", "00100000", "01100010", "01110101", "01110100", "00100000", "01111001", "01101111", "01110101", "00100000", "01100011", "01100001", "01101110", "00100111", "01110100", "00100000", "01110011", "01110100", "01101111", "01110000", "00100000", "01110101", "01110011", "00100000", "01100001", "01101100", "01101100", "00101110", "00101110", "00101110", "00100000", "01100001", "01100110", "01110100", "01100101", "01110010", "00100000", "01100001", "01101100", "01101100", "00101100", "00100000", "01110111", "01100101", "00100111", "01110010", "01100101", "00100000", "01100001", "01101100", "01101100", "00100000", "01100001", "01101100", "01101001", "01101011", "01100101", "00101110", "00100000"]

# HACK THE PLANET
demotxt = ["01010100", "01101000", "01101001", "01110011", "00100000", "01101001", "01110011", "00100000", "01101111", "01110101", "01110010", "00100000", "01110111", "01101111", "01110010", "01101100", "01100100", "00100000", "01101110", "01101111", "01110111", "00101110", "00101110", "00101110", "00100000", "01110100", "01101000", "01100101", "00100000", "01110111", "01101111", "01110010", "01101100", "01100100", "00100000", "01101111", "01100110", "00100000", "01110100", "01101000", "01100101", "00100000", "01100101", "01101100", "01100101", "01100011", "01110100", "01110010", "01101111", "01101110", "00100000", "01100001", "01101110", "01100100", "00100000", "01110100", "01101000", "01100101", "00100000", "01110011", "01110111", "01101001", "01110100", "01100011", "01101000", "00101100", "00100000", "01110100", "01101000", "01100101", "00100000", "01100010", "01100101", "01100001", "01110101", "01110100", "01111001", "00100000", "01101111", "01100110", "00100000", "01110100", "01101000", "01100101", "00100000", "01100010", "01100001", "01110101", "01100100", "00101110", "00100000", "01010111", "01100101", "00100000", "01101101", "01100001", "01101011", "01100101", "00100000", "01110101", "01110011", "01100101", "00100000", "01101111", "01100110", "00100000", "01100001", "00100000", "01110011", "01100101", "01110010", "01110110", "01101001", "01100011", "01100101", "00100000", "01100001", "01101100", "01110010", "01100101", "01100001", "01100100", "01111001", "00100000", "01100101", "01111000", "01101001", "01110011", "01110100", "01101001", "01101110", "01100111", "00100000", "01110111", "01101001", "01110100", "01101000", "01101111", "01110101", "01110100", "00100000", "01110000", "01100001", "01111001", "01101001", "01101110", "01100111", "00100000", "01100110", "01101111", "01110010", "00100000", "01110111", "01101000", "01100001", "01110100", "00100000", "01100011", "01101111", "01110101", "01101100", "01100100", "00100000", "01100010", "01100101", "00100000", "01100100", "01101001", "01110010", "01110100", "00101101", "01100011", "01101000", "01100101", "01100001", "01110000", "00100000", "01101001", "01100110", "00100000", "01101001", "01110100", "00100000", "01110111", "01100001", "01110011", "01101110", "00100111", "01110100", "00100000", "01110010", "01110101", "01101110", "00100000", "01100010", "01111001", "00100000", "01110000", "01110010", "01101111", "01100110", "01101001", "01110100", "01100101", "01100101", "01110010", "01101001", "01101110", "01100111", "00100000", "01100111", "01101100", "01110101", "01110100", "01110100", "01101111", "01101110", "01110011", "00101100", "00100000", "01100001", "01101110", "01100100", "00100000", "01111001", "01101111", "01110101", "00100000", "01100011", "01100001", "01101100", "01101100", "00100000", "01110101", "01110011", "00100000", "01100011", "01110010", "01101001", "01101101", "01101001", "01101110", "01100001", "01101100", "01110011", "00101110", "00100000", "01010111", "01100101", "00100000", "01100101", "01111000", "01110000", "01101100", "01101111", "01110010", "01100101", "00101110", "00101110", "00101110", "00100000", "01100001", "01101110", "01100100", "00100000", "01111001", "01101111", "01110101", "00100000", "01100011", "01100001", "01101100", "01101100", "01101001", "01101011", "01100101", "00101110", "00100000"]


# cycles through binary super fast and pretty
def binarywaves(waves, cipher, color = [255,255,255], bgcolor = [4,164,244]):
    r, g, b = color
    rb, gb, bb = bgcolor
    for wave in range(waves):
        uh.rotation(180)
        row = 0
        for i in cipher:
            characters = list(i)
            if row < 3:
                for j in range(len(characters)):
                    if int( characters[j] ) == 1:
                        uh.set_pixel( j, row, r, g, b )
                    else:
                        uh.set_pixel( j, row, rb, gb, bb )
                row += 1
            else:
                for j in range(len(characters)):
                    if int( characters[j] ) == 1:
                        uh.set_pixel( j, row, r, g, b )
                    else:
                        uh.set_pixel( j, row, rb, gb, bb )
                row = 0
            uh.show()
            time.sleep(.02)

def rainbow(loops):
    uh.rotation(90)
    i = 0.0
    offset = 30
    for m in range(loops):
        i = i + 0.3
        for y in range(height):
            for x in range(width):
                r = 0
                g = 0
                r = (math.cos((x+i)/2.0) + math.cos((y+i)/2.0)) * 64.0 + 128.0
                g = (math.sin((x+i)/1.5) + math.sin((y+i)/2.0)) * 64.0 + 128.0
                b = (math.sin((x+i)/2.0) + math.cos((y+i)/1.5)) * 64.0 + 128.0
                r = max(0, min(255, r + offset))
                g = max(0, min(255, g + offset))
                b = max(0, min(255, b + offset))
                uh.set_pixel(x,y,int(r),int(g),int(b))
        uh.show()
        time.sleep(0.01)

def blinky(blinks):
    uh.rotation(90)
    for bl in range(blinks):
        rand_mat = numpy.random.rand(width,height)
        for y in range(height):
            for x in range(width):
                h = 0.4 * rand_mat[x, y]
                s = 0.8
                v = rand_mat[x, y]
                rgb = colorsys.hsv_to_rgb(h, s, v)
                r = int(rgb[0]*255.0)
                g = int(rgb[1]*255.0)
                b = int(rgb[2]*255.0)
                uh.set_pixel(x, y, r, g, b)
            uh.show()
            time.sleep(0.01)

def tetris(times = 1, speed = 0.1):
    uh.rotation(90)
    heights = []
    # setup
    for b in range(0, (width-2)):
        heights.append(0)
    uh.off()
    for b in range(0, height):
        uh.set_pixel(0, b, 9, 56, 160)
    for b in range(0, height):
        uh.set_pixel((width-1), b, 9, 56, 160)
    for b in range(1, (width-1)):
        uh.set_pixel(b, 0, 9, 56, 160)
    uh.show()

    for n in range(times):
        for i in range(0, (width-2)*(height-1)):
            #drop ball
            ball_colour = [randint(100, 255), randint(100, 255), randint(100, 255)]
            ball_column = randint(0, (width-3))

            while heights[ball_column] == (height-1):
                ball_column = randint(0, (width-3))
            t_height = heights[ball_column]
            ball_y = (height-1)
            uh.set_pixel(ball_column + 1, ball_y, ball_colour[0], ball_colour[1], ball_colour[2])
            uh.show()
            dropcount = (height-2) - t_height
            for y in range(0, dropcount):
                uh.set_pixel(ball_column + 1, ball_y, 0, 0, 0)
                ball_y -= 1
                uh.set_pixel(ball_column + 1, ball_y, ball_colour[0], ball_colour[1], ball_colour[2])
                uh.show()
                time.sleep(speed)
            heights[ball_column] += 1
        time.sleep(.3)
        # setup
        heights = []
        for b in range(0, (width-2)):
            heights.append(0)
        uh.off()
        for b in range(0, height):
            uh.set_pixel(0, b, 9, 56, 160)
        for b in range(0, height):
            uh.set_pixel((width-1), b, 9, 56, 160)
        for b in range(1, (width-1)):
            uh.set_pixel(b, 0, 9, 56, 160)
        uh.show()

def vortex_swirl(x, y, step):
    x -= (width/2)
    y -= (height/2)

    dist = math.sqrt(pow(x, 2)+pow(y,2)) / 2.0
    angle = (step / 10.0) + (dist * 1.5)
    s = math.sin(angle);
    c = math.cos(angle);

    xs = x * c - y * s;
    ys = x * s + y * c;

    r = abs(xs + ys)
    r = r * 64.0
    r -= 20

    return (r, r + (s * 130), r + (c * 130))

def vortex_checker(x, y, step):
    x -= (width/2)
    y -= (height/2)

    angle = (step / 10.0)
    s = math.sin(angle);
    c = math.cos(angle);

    xs = x * c - y * s;
    ys = x * s + y * c;

    xs -= math.sin(step / 200.0) * 40.0
    ys -= math.cos(step / 200.0) * 40.0

    scale = step % 20
    scale /= 20
    scale = (math.sin(step / 50.0) / 8.0) + 0.25;

    xs *= scale
    ys *= scale

    xo = abs(xs) - int(abs(xs))
    yo = abs(ys) - int(abs(ys))
    l = 0 if (math.floor(xs) + math.floor(ys)) % 2 else 1 if xo > .1 and yo > .1 else .5

    r, g, b = colorsys.hsv_to_rgb((step % 255) / 255.0, 1, l)

    return (r * 255, g * 255, b * 255)

def vortex_rainbow_search(x, y, step):
    xs = math.sin((step) / 100.0) * 20.0
    ys = math.cos((step) / 100.0) * 20.0

    scale = ((math.sin(step / 60.0) + 1.0) / 5.0) + 0.2
    r = math.sin((x + xs) * scale) + math.cos((y + xs) * scale)
    g = math.sin((x + xs) * scale) + math.cos((y + ys) * scale)
    b = math.sin((x + ys) * scale) + math.cos((y + ys) * scale)

    return (r * 255, g * 255, b * 255)

def vortex_tunnel(x, y, step):

    speed = step / 100.0
    x -= (width/2)
    y -= (height/2)

    xo = math.sin(step / 27.0) * 2
    yo = math.cos(step / 18.0) * 2

    x += xo
    y += yo

    if y == 0:
        if x < 0:
            angle = -(math.pi / 2)
        else:
            angle = (math.pi / 2)
    else:
        angle = math.atan(x / y)

    if y > 0:
        angle += math.pi

    angle /= 2 * math.pi # convert angle to 0...1 range

    shade = math.sqrt(math.pow(x, 2) + math.pow(y, 2)) / 2.1
    shade = 1 if shade > 1 else shade

    angle += speed
    depth = speed + (math.sqrt(math.pow(x, 2) + math.pow(y, 2)) / 10)

    col1 = colorsys.hsv_to_rgb((step % 255) / 255.0, 1, .8)
    col2 = colorsys.hsv_to_rgb((step % 255) / 255.0, 1, .3)

    col = col1 if int(abs(angle * 6.0)) % 2 == 0 else col2

    td = .3 if int(abs(depth * 3.0)) % 2 == 0 else 0

    col = (col[0] + td, col[1] + td, col[2] + td)

    col = (col[0] * shade, col[1] * shade, col[2] * shade)

    return (col[0] * 255, col[1] * 255, col[2] * 255)

def vortex(layers):
    uh.rotation(90)
    effects = [vortex_checker, vortex_tunnel, vortex_swirl]
    step = 0
    for layer in range(layers):
        for i in range(1000):
            for y in range(height):
                for x in range(width):
                    r, g, b = effects[0](x, y, step)
                    if i > 400:
                        r2, g2, b2 = effects[-1](x, y, step)

                        ratio = (500.00 - i) / 100.0
                        r = r * ratio + r2 * (1.0 - ratio)
                        g = g * ratio + g2 * (1.0 - ratio)
                        b = b * ratio + b2 * (1.0 - ratio)
                    r = int(max(0, min(255, r)))
                    g = int(max(0, min(255, g)))
                    b = int(max(0, min(255, b)))
                    uh.set_pixel(x, y, r, g, b)

            step += 1

            uh.show()

            time.sleep(0.01)

        effect = effects.pop()
        effects.insert(0, effect)


# This is the main loop to run each animation
def theLoop():
    getThisPartyStarted()

    scanner(48)
    scanner(96, .5)
    scanner(16, .25)
    blinker(16, [255,0,0], 0.05)
    pause(2)
    scanner(16)
    scanner(32, .5)
    scanner(16, .25)
    blinker(16, [255,0,0], 0.05)
    pause(2)

    binarywaves(2,manifestotxt,[255,25,112],[9,56,160])
    vortex(2)
    rainbow(1800)

    blinker(16, [232, 239, 35])
    pacman(16)
    pacman(16, .5)
    pacman(16)
    pacman(16, .5)
    blinker(16, [232, 239, 35])
    blinky(512)

    blinker(16, [0,0,255])
    chase(32, 0.03)
    blinker(16, [0,0,255])
    chase(31, 0.03)
    blinker(1, [0,0,255])
    blinker(7, [255,0,0])

    blinker(1, [0,0,255])
    blinker(7, [255,0,0])
    larson(16, 0.03)
    larson(16, 0.015)
    larson(16, 0.03)
    larson(16, 0.015)
    larson(16, 0.03)
    larson(32, 0.015)
    blinker(8, [255,0,0])
    blinker(4, [255,0,0], .05)
    blinker(4, [255,0,0], .1)
    blinker(1, [255,0,0], .3)
    blinker(1, [255,0,0], 2)
    larson(16, 0.03)
    larson(16, 0.015)
    larson(16, 0.03)
    larson(16, 0.015)
    larson(16, 0.03)
    larson(32, 0.015)
    blinker(8, [255,0,0])
    blinker(4, [255,0,0], .05)
    blinker(4, [255,0,0], .1)
    blinker(1, [255,0,0], .3)
    blinker(1, [255,0,0], 2)

    vortex(2)
    rainbow(1800)
    vortex(2)
    rainbow(1800)
    blinker(1, [255,0,0], .25)
    blinker(1, [0,255,0], .25)
    blinker(1, [0,0,255], .25)
    blinker(1, [255,255,255], .25)

    tetris(24, 0.02)
    blinker(1, [255,255,255], .25)
    blinker(1, [0,0,255], .25)
    blinker(1, [0,255,0], .25)
    blinker(1, [255,0,0], .5)
    pause(3.5)

    theLoop()

# This is the main loop to run each animation
def demo():
    getThisPartyStarted()

    scanner(8)
    scanner(16, .5)
    scanner(16, .25)
    blinker(16, [255,0,0], 0.05)
    pause(2)

    binarywaves(1,demotxt,[255,25,112],[9,56,160])
    rainbow(400)

    blinker(16, [232, 239, 35])
    pacman(8)
    pacman(8, .5)
    blinker(16, [232, 239, 35])
    blinky(56)

    blinker(16, [0,0,255])
    chase(8, 0.03)
    blinker(16, [0,0,255])
    blinker(7, [255,0,0])
    blinker(1, [0,0,255])
    blinker(7, [255,0,0])
    larson(8, 0.03)
    larson(8, 0.015)
    blinker(8, [255,0,0])
    blinker(4, [255,0,0], .05)
    blinker(4, [255,0,0], .1)
    blinker(1, [255,0,0], .3)
    blinker(1, [255,0,0], 2)

    blinker(1, [255,0,0], .25)
    blinker(1, [0,255,0], .25)
    blinker(1, [0,0,255], .25)
    blinker(1, [255,255,255], .25)

    tetris(4, 0.02)
    blinker(1, [255,255,255], .25)
    blinker(1, [0,0,255], .25)
    blinker(1, [0,255,0], .25)
    blinker(1, [255,0,0], .5)
    vortex(1)
    pause(3.5)

    theLoop()

# I use theFastLoop() for testing and debugging individual scripts
def theFastLoop():
    # scanner(48)
    # scanner(96, .5)
    # scanner(16, .25)
    # blinker(16, [255,0,155], 0.05)
    # pause(2)
    # scanner(16)
    # scanner(32, .5)
    # scanner(16, .25)
    # blinker(16, [255,0,155], 0.05)
    # pause(2)
    binarywaves(2,manifestotxt,[255,25,112],[9,56,160])
    # vortex(2)
    # rainbow(1800)
    # rainbow(300)
    # blinker(16, [232, 239, 35])
    # pacman(16)
    # pacman(16, .5)
    # pacman(16)
    # pacman(16, .5)
    # blinker(16, [232, 239, 35])
    # blinky(512)
    # blinky(40)
    # blinker(16, [0,0,255])
    # chase(32, 0.03)
    # blinker(16, [0,0,255])
    # chase(32, 0.03)
    # chase(7, 0.03)
    # blinker(1, [0,0,255])
    # blinker(7, [255,0,0])
    # larson(16, 0.03)
    # larson(16, 0.015)
    # larson(16, 0.03)
    # larson(16, 0.015)
    # larson(16, 0.03)
    # larson(32, 0.015)
    # blinker(8, [255,0,0])
    # blinker(4, [255,0,0], .05)
    # blinker(4, [255,0,0], .1)
    # blinker(1, [255,0,0], .3)
    # blinker(1, [255,0,0], 2)
    # larson(16, 0.03)
    # larson(16, 0.015)
    # larson(16, 0.03)
    # larson(16, 0.015)
    # larson(16, 0.03)
    # larson(32, 0.015)
    # larson(8, 0.015)
    # blinker(8, [255,0,0])
    # blinker(4, [255,0,0], .05)
    # blinker(4, [255,0,0], .1)
    # blinker(1, [255,0,0], .3)
    # blinker(1, [255,0,0], 2)
    # vortex(2)
    # rainbow(1800)
    # vortex(2)
    # rainbow(1800)
    # rainbow(200)
    # blinker(1, [255,0,0], .25)
    # blinker(1, [0,255,0], .25)
    # blinker(1, [0,0,255], .25)
    # blinker(1, [255,255,255], .25)
    # tetris(24, 0.02)
    # blinker(1, [255,255,255], .25)
    # blinker(1, [0,0,255], .25)
    # blinker(1, [0,255,0], .25)
    # blinker(1, [255,0,0], .5)
    # pause(3.5)
    # getThisPartyStarted()
    theFastLoop()


# theFastLoop()
theLoop()
# demo()

import unicornhat as uh
import time
import colorsys
import math
from random import randint
import numpy

uh.set_layout(uh.PHAT)
uh.rotation(90)
uh.brightness(0.4)
width,height=uh.get_shape()

def pause(seconds = 1):
    uh.clear()
    uh.show()
    time.sleep(1)

def startup(speed = 4):
    uh.rotation(0)
    r, g, b = [27, 252, 2]

    uh.set_pixel( 2, 2, r, g, b )
    uh.set_pixel( 2, 1, r, g, b )
    uh.set_pixel( 3, 2, r, g, b )
    uh.set_pixel( 3, 1, r, g, b )

    uh.set_pixel( 6, 3, r, g, b )
    uh.set_pixel( 7, 1, r, g, b )
    uh.set_pixel( 7, 2, r, g, b )
    uh.set_pixel( 6, 0, r, g, b )

    uh.show()
    time.sleep( speed )
    uh.clear()
    time.sleep( speed / 2 )

# :)
def smilestartup():
    uh.rotation(180)
    r, g, b = [255, 255, 255]

    uh.set_pixel( 2, 0, r, g, b )
    uh.set_pixel( 5, 0, r, g, b )

    uh.set_pixel( 1, 2, r, g, b )
    uh.set_pixel( 2, 3, r, g, b )
    uh.set_pixel( 3, 3, r, g, b )
    uh.set_pixel( 4, 3, r, g, b )
    uh.set_pixel( 5, 3, r, g, b )
    uh.set_pixel( 6, 2, r, g, b )

    uh.show()
    time.sleep(4)

def chase(laps, speed = 0.04):
    for lap in range(laps):
        uh.rotation(0)
        r, g, b = [0, 0, 255]
        t = speed
        for x in range(8):
            uh.set_pixel( x, 2, r, g, b )
            uh.set_pixel( x, 1, r, g, b )
            uh.show()
            time.sleep( t )
            uh.clear()
        for x in range(6,0,-1):
            uh.set_pixel( x, 3, r, g, b )
            uh.set_pixel( x, 4, r, g, b )
            uh.show()
            time.sleep( t )
            uh.clear()

hellotxt = [
     "    "
    ,"    "
    ,"    "
    ,"    "
    ,"    "
    ,"    "
    ,"    "
    ,"    "
    ,"    "
    ,"    "
    ,"XXXX"
    ," X  "
    ," X  "
    ,"XXXX"
    ,"    "
    ,"XXXX"
    ,"XX X"
    ,"X  X"
    ,"    "
    ,"XXXX"
    ,"X   "
    ,"X   "
    ,"    "
    ,"XXXX"
    ,"X   "
    ,"X   "
    ,"    "
    ,"XXXX"
    ,"X  X"
    ,"XXXX"
    ,"    "
    ,"    "
    ,"    "
    ,"    "
    ,"    "
    ,"XXX "
    ,"   X"
    ," XX "
    ,"   X"
    ,"XXX "
    ,"    "
    ,"  XX"
    ,"XX  "
    ,"  XX"
    ,"    "
    ,"    "
    ,"    "
    ,"    "
    ,"    "
    ,"XXXX"
    ,"  X "
    ," X  "
    ,"XXXX"
    ,"    "
    ,"XXX "
    ," X X"
    ,"XXX "
    ,"    "
    ,"XXX "
    ,"   X"
    ," XX "
    ,"   X"
    ,"XXX "
    ,"    "
    ,"XXXX"
    ,"XX X"
    ,"X  X"
    ,"    "
    ,"    "
    ,"    "
    ,"    "
    ,"    "
    ,"XXXX"
    ,"    "
    ,"X XX"
    ,"X XX"
    ,"XX X"
    ,"    "
    ,"    "
    ,"    "
    ,"    "
    ,"    "
    ,"    "
    ,"    "
    ,"    "
    ]

heckseventxt = [
     "    "
    ,"    "
    ,"    "
    ,"    "
    ,"    "
    ,"    "
    ,"    "
    ,"    "
    ,"    "
    ,"    "
    ,"XXXX"
    ," X  "
    ," X  "
    ,"XXXX"
    ,"    "
    ,"XXXX"
    ,"XX X"
    ,"X  X"
    ,"    "
    ," XX "
    ,"X  X"
    ,"X  X"
    ,"    "
    ,"XXXX"
    ,"  X "
    ,"XX X"
    ,"    "
    ,"X XX"
    ,"X XX"
    ,"XX X"
    ,"    "
    ,"XXXX"
    ,"XX X"
    ,"X  X"
    ,"    "
    ," XXX"
    ,"X   "
    ," XXX"
    ,"    "
    ,"XXXX"
    ,"XX X"
    ,"X  X"
    ,"    "
    ,"XXXX"
    ,"  X "
    ," X  "
    ,"XXXX"
    ,"    "
    ,"    "
    ,"    "
    ,"    "
    ,"    "
    ,"    "
    ,"    "
    ,"    "
    ]

welcometxt = [
     "    "
    ,"    "
    ,"    "
    ,"    "
    ,"    "
    ,"    "
    ,"    "
    ,"    "
    ,"    "
    ,"    "
    ," XXX"
    ,"X   "
    ," XX "
    ,"X   "
    ," XXX"
    ,"    "
    ,"XXXX"
    ,"XX X"
    ,"X  X"
    ,"    "
    ,"XXXX"
    ,"X   "
    ,"X   "
    ,"    "
    ," XX "
    ,"X  X"
    ,"X  X"
    ,"    "
    ,"XXXX"
    ,"X  X"
    ,"XXXX"
    ,"    "
    ,"XXX "
    ,"   X"
    ," XX "
    ,"   X"
    ,"XXX "
    ,"    "
    ,"XXXX"
    ,"XX X"
    ,"X  X"
    ,"    "
    ,"    "
    ,"    "
    ,"    "
    ,"    "
    ,"   X"
    ,"XXXX"
    ,"   X"
    ,"    "
    ,"XXXX"
    ,"X  X"
    ,"XXXX"
    ,"    "
    ,"    "
    ,"    "
    ,"    "
    ,"    "
    ,"XXXX"
    ," X  "
    ," X  "
    ,"XXXX"
    ,"    "
    ,"XXXX"
    ,"XX X"
    ,"X  X"
    ,"    "
    ," XX "
    ,"X  X"
    ,"X  X"
    ,"    "
    ,"XXXX"
    ,"  X "
    ,"XX X"
    ,"    "
    ,"    "
    ,"    "
    ,"    "
    ,"    "
    ,"    "
    ,"    "
    ,"    "
    ,"    "
    ,"    "
    ]


def billboard(passes, text, speed = 0.15, color = [255, 0, 0], bgcolor = [0, 0, 0]):
    for p in range(passes):
        uh.rotation(90)
        i = -1
        for k in range(len(text)):
            r, g, b = color
            rb, gb, bb = bgcolor
            i = 0 if i>=100*len(text) else i+1 # avoid overflow
            for h in range(height):
                for w in range(width):
                    hPos = (i+h) % len(text)
                    chr = text[hPos][w]
                    if chr == ' ':
                        uh.set_pixel(w, h, rb, gb, bb)
                    else:
                        uh.set_pixel(w, h, r, g, b)
            uh.show()
            time.sleep(speed)

def blinky(blinks):
    uh.rotation(270)
    for bl in range(blinks):
        rand_mat = numpy.random.rand(width,height)
        for y in range(height):
            for x in range(width):
                h = 0.4 * rand_mat[x, y]
                s = 0.8
                v = rand_mat[x, y]
                rgb = colorsys.hsv_to_rgb(h, s, v)
                r = int(rgb[0]*255.0)
                g = int(rgb[1]*255.0)
                b = int(rgb[2]*255.0)
                uh.set_pixel(x, y, r, g, b)
            uh.show()
            time.sleep(0.01)

ciphertext = [
    "01100100", "01100101", "01100110", "01100011", "01101111", "01101110", "00100000", "01101001", "01110011", "00100000", "01100011", "01100001", "01101110", "01100011", "01100101", "01101100", "01101100", "01100101", "01100100"
]

# Funny little way to display binary to start a cipher challenge
# It no longer does, but could be used that way
def cipherprint(reads,cipher):
    for r in range(reads):
        uh.rotation(180)
        row = 1
        panel = 0
        r, g, b = [239, 35, 114]

        for i in cipher:
            characters = list(i)
            for m in range(8):
                uh.set_pixel( m, 0, r, g, b )
                uh.set_pixel( m, 3, r, g, b )
                uh.show()
            if row < 2:
                for j in range(len(characters)):
                    uh.set_pixel( j, row, 255, 255, 255 )
                    uh.show()
                    time.sleep(.02)
                    if int( characters[j] ) == 1:
                        uh.set_pixel( j, row, 220, 220, 220 )
                    else:
                        uh.set_pixel( j, row, 0, 0, 0 )
                    uh.show()
                    time.sleep(.02)
                row += 1
                time.sleep(.5)
            else:
                for j in range(len(characters)):
                    uh.set_pixel( j, row, 255, 255, 255 )
                    uh.show()
                    time.sleep(.02)
                    if int( characters[j] ) == 1:
                        uh.set_pixel( j, row, 220, 220, 220 )
                    else:
                        uh.set_pixel( j, row, 0, 0, 0 )
                    uh.show()
                    time.sleep(.02)
                time.sleep(.5)
                uh.show()
                time.sleep(3)
                uh.clear()
                row = 1
                panel += 1
            uh.show()
            if panel > 1:
                r, g, b = [35, 226, 239]
            if panel > 3:
                r, g, b = [232, 239, 35]

# HACK THE PLANET
manifestotxt = [
    "01010100", "01101000", "01101001", "01110011", "00100000", "01101001", "01110011", "00100000", "01101111", "01110101", "01110010", "00100000", "01110111", "01101111", "01110010", "01101100", "01100100", "00100000", "01101110", "01101111", "01110111", "00101110", "00101110", "00101110", "00100000", "01110100", "01101000", "01100101", "00100000", "01110111", "01101111", "01110010", "01101100", "01100100", "00100000", "01101111", "01100110", "00100000", "01110100", "01101000", "01100101", "00100000", "01100101", "01101100", "01100101", "01100011", "01110100", "01110010", "01101111", "01101110", "00100000", "01100001", "01101110", "01100100", "00100000", "01110100", "01101000", "01100101", "00100000", "01110011", "01110111", "01101001", "01110100", "01100011", "01101000", "00101100", "00100000", "01110100", "01101000", "01100101", "00100000", "01100010", "01100101", "01100001", "01110101", "01110100", "01111001", "00100000", "01101111", "01100110", "00100000", "01110100", "01101000", "01100101", "00100000", "01100010", "01100001", "01110101", "01100100", "00101110", "00100000", "01010111", "01100101", "00100000", "01101101", "01100001", "01101011", "01100101", "00100000", "01110101", "01110011", "01100101", "00100000", "01101111", "01100110", "00100000", "01100001", "00100000", "01110011", "01100101", "01110010", "01110110", "01101001", "01100011", "01100101", "00100000", "01100001", "01101100", "01110010", "01100101", "01100001", "01100100", "01111001", "00100000", "01100101", "01111000", "01101001", "01110011", "01110100", "01101001", "01101110", "01100111", "00100000", "01110111", "01101001", "01110100", "01101000", "01101111", "01110101", "01110100", "00100000", "01110000", "01100001", "01111001", "01101001", "01101110", "01100111", "00100000", "01100110", "01101111", "01110010", "00100000", "01110111", "01101000", "01100001", "01110100", "00100000", "01100011", "01101111", "01110101", "01101100", "01100100", "00100000", "01100010", "01100101", "00100000", "01100100", "01101001", "01110010", "01110100", "00101101", "01100011", "01101000", "01100101", "01100001", "01110000", "00100000", "01101001", "01100110", "00100000", "01101001", "01110100", "00100000", "01110111", "01100001", "01110011", "01101110", "00100111", "01110100", "00100000", "01110010", "01110101", "01101110", "00100000", "01100010", "01111001", "00100000", "01110000", "01110010", "01101111", "01100110", "01101001", "01110100", "01100101", "01100101", "01110010", "01101001", "01101110", "01100111", "00100000", "01100111", "01101100", "01110101", "01110100", "01110100", "01101111", "01101110", "01110011", "00101100", "00100000", "01100001", "01101110", "01100100", "00100000", "01111001", "01101111", "01110101", "00100000", "01100011", "01100001", "01101100", "01101100", "00100000", "01110101", "01110011", "00100000", "01100011", "01110010", "01101001", "01101101", "01101001", "01101110", "01100001", "01101100", "01110011", "00101110", "00100000", "01010111", "01100101", "00100000", "01100101", "01111000", "01110000", "01101100", "01101111", "01110010", "01100101", "00101110", "00101110", "00101110", "00100000", "01100001", "01101110", "01100100", "00100000", "01111001", "01101111", "01110101", "00100000", "01100011", "01100001", "01101100", "01101100", "00100000", "01110101", "01110011", "00100000", "01100011", "01110010", "01101001", "01101101", "01101001", "01101110", "01100001", "01101100", "01110011", "00101110", "00100000", "01010111", "01100101", "00100000", "01110011", "01100101", "01100101", "01101011", "00100000", "01100001", "01100110", "01110100", "01100101", "01110010", "00100000", "01101011", "01101110", "01101111", "01110111", "01101100", "01100101", "01100100", "01100111", "01100101", "00101110", "00101110", "00101110", "00100000", "01100001", "01101110", "01100100", "00100000", "01111001", "01101111", "01110101", "00100000", "01100011", "01100001", "01101100", "01101100", "00100000", "01110101", "01110011", "00100000", "01100011", "01110010", "01101001", "01101101", "01101001", "01101110", "01100001", "01101100", "01110011", "00101110", "00100000", "01010111", "01100101", "00100000", "01100101", "01111000", "01101001", "01110011", "01110100", "00100000", "01110111", "01101001", "01110100", "01101000", "01101111", "01110101", "01110100", "00100000", "01110011", "01101011", "01101001", "01101110", "00100000", "01100011", "01101111", "01101100", "01101111", "01110010", "00101100", "00100000", "01110111", "01101001", "01110100", "01101000", "01101111", "01110101", "01110100", "00100000", "01101110", "01100001", "01110100", "01101001", "01101111", "01101110", "01100001", "01101100", "01101001", "01110100", "01111001", "00101100", "00100000", "01110111", "01101001", "01110100", "01101000", "01101111", "01110101", "01110100", "00100000", "01110010", "01100101", "01101100", "01101001", "01100111", "01101001", "01101111", "01110101", "01110011", "00100000", "01100010", "01101001", "01100001", "01110011", "00101110", "00101110", "00101110", "00100000", "01100001", "01101110", "01100100", "00100000", "01111001", "01101111", "01110101", "00100000", "01100011", "01100001", "01101100", "01101100", "00100000", "01110101", "01110011", "00100000", "01100011", "01110010", "01101001", "01101101", "01101001", "01101110", "01100001", "01101100", "01110011", "00101110", "00100000", "01011001", "01101111", "01110101", "00100000", "01100010", "01110101", "01101001", "01101100", "01100100", "00100000", "01100001", "01110100", "01101111", "01101101", "01101001", "01100011", "00100000", "01100010", "01101111", "01101101", "01100010", "01110011", "00101100", "00100000", "01111001", "01101111", "01110101", "00100000", "01110111", "01100001", "01100111", "01100101", "00100000", "01110111", "01100001", "01110010", "01110011", "00101100", "00100000", "01111001", "01101111", "01110101", "00100000", "01101101", "01110101", "01110010", "01100100", "01100101", "01110010", "00101100", "00100000", "01100011", "01101000", "01100101", "01100001", "01110100", "00101100", "00100000", "01100001", "01101110", "01100100", "00100000", "01101100", "01101001", "01100101", "00100000", "01110100", "01101111", "00100000", "01110101", "01110011", "00100000", "01100001", "01101110", "01100100", "00100000", "01110100", "01110010", "01111001", "00100000", "01110100", "01101111", "00100000", "01101101", "01100001", "01101011", "01100101", "00100000", "01110101", "01110011", "00100000", "01100010", "01100101", "01101100", "01101001", "01100101", "01110110", "01100101", "00100000", "01101001", "01110100", "00100111", "01110011", "00100000", "01100110", "01101111", "01110010", "00100000", "01101111", "01110101", "01110010", "00100000", "01101111", "01110111", "01101110", "00100000", "01100111", "01101111", "01101111", "01100100", "00101100", "00100000", "01111001", "01100101", "01110100", "00100000", "01110111", "01100101", "00100111", "01110010", "01100101", "00100000", "01110100", "01101000", "01100101", "00100000", "01100011", "01110010", "01101001", "01101101", "01101001", "01101110", "01100001", "01101100", "01110011", "00101110", "00001101", "00001010", "00001101", "00001010", "01011001", "01100101", "01110011", "00101100", "00100000", "01001001", "00100000", "01100001", "01101101", "00100000", "01100001", "00100000", "01100011", "01110010", "01101001", "01101101", "01101001", "01101110", "01100001", "01101100", "00101110", "00100000", "01001101", "01111001", "00100000", "01100011", "01110010", "01101001", "01101101", "01100101", "00100000", "01101001", "01110011", "00100000", "01110100", "01101000", "01100001", "01110100", "00100000", "01101111", "01100110", "00100000", "01100011", "01110101", "01110010", "01101001", "01101111", "01110011", "01101001", "01110100", "01111001", "00101110", "00100000", "01001101", "01111001", "00100000", "01100011", "01110010", "01101001", "01101101", "01100101", "00100000", "01101001", "01110011", "00100000", "01110100", "01101000", "01100001", "01110100", "00100000", "01101111", "01100110", "00100000", "01101010", "01110101", "01100100", "01100111", "01101001", "01101110", "01100111", "00100000", "01110000", "01100101", "01101111", "01110000", "01101100", "01100101", "00100000", "01100010", "01111001", "00100000", "01110111", "01101000", "01100001", "01110100", "00100000", "01110100", "01101000", "01100101", "01111001", "00100000", "01110011", "01100001", "01111001", "00100000", "01100001", "01101110", "01100100", "00100000", "01110100", "01101000", "01101001", "01101110", "01101011", "00101100", "00100000", "01101110", "01101111", "01110100", "00100000", "01110111", "01101000", "01100001", "01110100", "00100000", "01110100", "01101000", "01100101", "01111001", "00100000", "01101100", "01101111", "01101111", "01101011", "00100000", "01101100", "01101001", "01101011", "01100101", "00101110", "00100000", "01001101", "01111001", "00100000", "01100011", "01110010", "01101001", "01101101", "01100101", "00100000", "01101001", "01110011", "00100000", "01110100", "01101000", "01100001", "01110100", "00100000", "01101111", "01100110", "00100000", "01101111", "01110101", "01110100", "01110011", "01101101", "01100001", "01110010", "01110100", "01101001", "01101110", "01100111", "00100000", "01111001", "01101111", "01110101", "00101100", "00100000", "01110011", "01101111", "01101101", "01100101", "01110100", "01101000", "01101001", "01101110", "01100111", "00100000", "01110100", "01101000", "01100001", "01110100", "00100000", "01111001", "01101111", "01110101", "00100000", "01110111", "01101001", "01101100", "01101100", "00100000", "01101110", "01100101", "01110110", "01100101", "01110010", "00100000", "01100110", "01101111", "01110010", "01100111", "01101001", "01110110", "01100101", "00100000", "01101101", "01100101", "00100000", "01100110", "01101111", "01110010", "00101110", "00001101", "00001010", "00001101", "00001010", "01001001", "00100000", "01100001", "01101101", "00100000", "01100001", "00100000", "01101000", "01100001", "01100011", "01101011", "01100101", "01110010", "00101100", "00100000", "01100001", "01101110", "01100100", "00100000", "01110100", "01101000", "01101001", "01110011", "00100000", "01101001", "01110011", "00100000", "01101101", "01111001", "00100000", "01101101", "01100001", "01101110", "01101001", "01100110", "01100101", "01110011", "01110100", "01101111", "00101110", "00100000", "01011001", "01101111", "01110101", "00100000", "01101101", "01100001", "01111001", "00100000", "01110011", "01110100", "01101111", "01110000", "00100000", "01110100", "01101000", "01101001", "01110011", "00100000", "01101001", "01101110", "01100100", "01101001", "01110110", "01101001", "01100100", "01110101", "01100001", "01101100", "00101100", "00100000", "01100010", "01110101", "01110100", "00100000", "01111001", "01101111", "01110101", "00100000", "01100011", "01100001", "01101110", "00100111", "01110100", "00100000", "01110011", "01110100", "01101111", "01110000", "00100000", "01110101", "01110011", "00100000", "01100001", "01101100", "01101100", "00101110", "00101110", "00101110", "00100000", "01100001", "01100110", "01110100", "01100101", "01110010", "00100000", "01100001", "01101100", "01101100", "00101100", "00100000", "01110111", "01100101", "00100111", "01110010", "01100101", "00100000", "01100001", "01101100", "01101100", "00100000", "01100001", "01101100", "01101001", "01101011", "01100101", "00101110", "00100000"]

def binarywaves(waves, cipher, color = [255,255,255], bgcolor = [4,164,244]):
    r, g, b = color
    rb, gb, bb = bgcolor
    for wave in range(waves):
        uh.rotation(180)
        row = 0
        for i in cipher:
            characters = list(i)
            if row < 3:
                for j in range(len(characters)):
                    if int( characters[j] ) == 1:
                        uh.set_pixel( j, row, r, g, b )
                    else:
                        uh.set_pixel( j, row, rb, gb, bb )
                row += 1
            else:
                for j in range(len(characters)):
                    if int( characters[j] ) == 1:
                        uh.set_pixel( j, row, r, g, b )
                    else:
                        uh.set_pixel( j, row, rb, gb, bb )
                row = 0
            uh.show()
            time.sleep(.02)

def rainbow(loops):
    uh.rotation(90)
    i = 0.0
    offset = 30
    for m in range(loops):
        i = i + 0.3
        for y in range(height):
            for x in range(width):
                r = 0
                g = 0
                r = (math.cos((x+i)/2.0) + math.cos((y+i)/2.0)) * 64.0 + 128.0
                g = (math.sin((x+i)/1.5) + math.sin((y+i)/2.0)) * 64.0 + 128.0
                b = (math.sin((x+i)/2.0) + math.cos((y+i)/1.5)) * 64.0 + 128.0
                r = max(0, min(255, r + offset))
                g = max(0, min(255, g + offset))
                b = max(0, min(255, b + offset))
                uh.set_pixel(x,y,int(r),int(g),int(b))
        uh.show()
        time.sleep(0.01)

def theLoop():
    pause()
    billboard(1,hellotxt, 0.15, [130, 130, 130])
    billboard(1,heckseventxt, 0.15, [255, 0, 0])
    pause()
    billboard(1,welcometxt, 0.15, [51, 153, 204])
    blinky(250)
    pause()
    cipherprint(1,ciphertext)
    pause()
    theLoop()

def theFastLoop():
#    billboard(1,hellotxt, 0.15, [130, 130, 130])
#    billboard(1,heckseventxt, 0.15, [255, 0, 0])
#    pause()
    billboard(1,welcometxt, 0.15, [231, 4, 247])
    blinky(25)
    cipherprint(1,ciphertext)
    theFastLoop()

smilestartup()
pause()
# theFastLoop()
theLoop()
